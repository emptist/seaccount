// Generated by CoffeeScript 1.10.0
var ClientAccount, HSClientAccount, IBClientAccount, Position, util,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

util = require('util');

ClientAccount = (function() {
  function ClientAccount(broker, id, password) {
    this.broker = broker;
    this.id = id;
    this.password = password;
  }

  return ClientAccount;

})();

IBClientAccount = (function(superClass) {
  extend(IBClientAccount, superClass);

  function IBClientAccount() {
    return IBClientAccount.__super__.constructor.apply(this, arguments);
  }

  return IBClientAccount;

})(ClientAccount);


/* 注意:
  所有英文方法,多是兼容現有Python接口所需,將來會全部改為中文標準名詞
 */


/*
  options: @broker,@id,@password,@servicePassword
 */

HSClientAccount = (function(superClass) {
  extend(HSClientAccount, superClass);

  function HSClientAccount(FundAccount, options) {
    this.FundAccount = FundAccount;
    this.求資產賬戶 = bind(this.求資產賬戶, this);
    this.資產賬戶 = {};
    this.黑名單 = [];
  }

  HSClientAccount.prototype.操作指令 = function(obj, 回執) {

    /*過濾操作指令
    
      回執
        obj: 操作指令string
      或
        null
     */
    return 回執((function() {
      var ref;
      switch (obj.操作) {
        case 'cancelIt':
          return obj;
        case 'buyIt':

          /*
          須逐步實現以下買入控制:
            1. 排除黑名單
            1. 調整買入數量,令不超比例
            1. 檢查委託價格
            1. 回報成交狀態
           */
          if (ref = obj.代碼, indexOf.call(this.黑名單, ref) >= 0) {
            return null;
          } else {
            return this.求資產賬戶(obj.代碼).買入評估(obj);
          }
          break;
        case 'sellIt':
          return this.求資產賬戶(obj.代碼).賣出評估(obj);
        default:
          return null;
      }
    }).call(this));
  };

  HSClientAccount.prototype.查詢簡況 = function(data, callback) {
    return this.查詢持倉(data, callback);
  };

  HSClientAccount.prototype.查詢持倉 = function(data, callback) {

    /**
    
      以下代碼有兩次循環
    
      這是必須的!
    
      不要試圖合併優化!
    
    *
     */

    /** 1 更新前 循環1 * */
    var key, ref, results, tick, value, 品種;
    ref = this.資產賬戶;
    for (key in ref) {
      value = ref[key];
      value.準備更新持倉();
    }

    /** 2 更新中 * */
    results = [];
    for (key in data) {
      tick = data[key];
      品種 = new Position();
      品種.華泰品種(tick);
      results.push(this.求資產賬戶(品種.代碼).更新品種(品種, this, callback));
    }
    return results;

    /** 3 更新後 循環2
    設計錯誤,已經改由 fund.coffee 更新品種時各自添加拷貝入前持倉
    if @資產賬戶尚未就緒
      for key, value of @資產賬戶
        value.記錄前持倉()
      @資產賬戶尚未就緒 = false
    *
     */
  };


  /*
    按照目前設計, 此處 回執 不要用
   */

  HSClientAccount.prototype.查詢資產 = function(data, 回執) {
    var key, results, value;
    results = [];
    for (key in data) {
      value = data[key];
      if (this.資產賬戶[key] == null) {
        this.資產賬戶[key] = new this.FundAccount(this.id);
      }
      results.push(this.資產賬戶[key].記錄資產(value));
    }
    return results;
  };

  HSClientAccount.prototype.查可撤單 = function(data, callback) {
    return util.log("got orders data", data);
  };

  HSClientAccount.prototype.求資產賬戶 = function(代碼) {
    var 幣種;
    幣種 = (function() {
      switch (代碼[0]) {
        case '9':
          return '1';
        case '2':
          return '2';
        default:
          return '0';
      }
    })();
    return this.資產賬戶[幣種];
  };

  return HSClientAccount;

})(ClientAccount);

Position = (function() {
  function Position(代碼1) {
    this.代碼 = 代碼1;
  }

  Position.prototype.拷貝 = function() {
    var key, val, 品種;
    品種 = new Position(this.代碼);
    for (key in this) {
      val = this[key];
      品種[key] = val;
    }
    return 品種;
  };

  Position.prototype.華泰品種 = function(va) {
    this.序號 = va.index;
    this.平均買入價 = va.av_buy_price;
    this.平均收支平衡 = va.av_income_balance;
    this.成本價 = va.CostPrice;
    this.持倉股數 = va.SecurityAmount;
    this.可售股數 = va.SecurityAvail;
    this.交易所 = va.exchange_name;
    this.交易所類號 = va.exchange_type;
    this.標識 = va.hand_flag;
    this.盈虧 = va.Profit;
    this.盈虧百分比 = va.income_balance_ratio;
    this.保本價 = va.keep_cost_price;
    this.最近價 = va.LastPrice;
    this.持倉市值 = va.HoldingValue;
    this.股東賬號 = va.stock_account;
    this.代碼 = va.SecurityCode;
    this.名稱 = va.SecurityName;
    this.超額 = va.extra;
    return this;
  };

  return Position;

})();

module.exports = {
  HSClientAccount: HSClientAccount
};

//# sourceMappingURL=account.js.map
